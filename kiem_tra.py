# -*- coding: utf-8 -*-
"""Kiem_tra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GYPHNijGl1lt-nx-sM9sQ4h9R8hEiAqi
"""

import pandas as pd

df = pd.read_csv('/content/international-airline-passengers.csv')
df

# Đổi tên cột
df.columns = ['Month', 'Passengers']

# Kiểm tra missing values
print(df.isnull().sum())

df['Month'] = pd.to_datetime(df['Month'], errors='coerce')
print(df[df['Month'].isnull()])

df = df.dropna(subset=['Month'])

# Chuyển cột 'Month' thành datetime
df['Month'] = pd.to_datetime(df['Month'])

# Đặt 'Month' làm chỉ mục
df.set_index('Month', inplace=True)

# Kiểm tra lại kiểu dữ liệu và chỉ mục
print(df.index)

import matplotlib.pyplot as plt

# Vẽ chuỗi thời gian
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['Passengers'], label='Số hành khách')
plt.title('Số lượng cuộc gọi theo tháng')
plt.xlabel('Thời gian')
plt.ylabel('Số hành khách')
plt.grid(True)
plt.legend()
plt.show()

import numpy as np

df['Passengers_log'] = np.log(df['Passengers'])

# Vẽ biểu đồ sau log-transform
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(df.index, df['Passengers_log'], label='Log(Passengers)')
plt.title('Số hành cuộc gọi log-transform')
plt.grid(True)
plt.legend()
plt.show()

from statsmodels.tsa.stattools import adfuller

result = adfuller(df['Passengers_log'])

print('ADF Statistic:', result[0])
print('p-value:', result[1])

df['Log_diff'] = df['Passengers_log'].diff()
df = df.dropna()

# Vẽ sau khi sai phân
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['Log_diff'], label='Sai phân log')
plt.title('Chuỗi sau sai phân log')
plt.grid(True)
plt.legend()
plt.show()

result_diff = adfuller(df['Log_diff'])

print('ADF Statistic (after diff):', result_diff[0])
print('p-value (after diff):', result_diff[1])

from statsmodels.tsa.statespace.sarimax import SARIMAX

# Tạo mô hình SARIMA. Ví dụ (p=1, d=1, q=1), seasonal=(1,1,1,12)
model_sarima = SARIMAX(
    df['Passengers_log'],
    order=(1,1,1),
    seasonal_order=(1,1,1,12),
    enforce_stationarity=False,
    enforce_invertibility=False
)

model_fit_sarima = model_sarima.fit(disp=False)

# Dự báo 7 bước
forecast_log = model_fit_sarima.forecast(steps=7)

# Biến đổi ngược log
forecast_sarima = np.exp(forecast_log)

print(forecast_sarima)

plt.figure(figsize=(12,6))
plt.plot(df.index, df['Passengers'], label='Thực tế')
plt.plot(forecast_sarima.index, forecast_sarima, label='Dự báo SARIMA', linestyle='--')
plt.title('Dự báo số cuộc gọi 7 ngày sau')
plt.xlabel('Thời gian')
plt.ylabel('Số hành khách')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Giả sử df đã có cột 'Passengers' với index datetime

# 1. Chia dữ liệu
train = df.iloc[:-12]
test = df.iloc[-12:]

# 2. Huấn luyện mô hình SARIMA (ví dụ tham số)
model_sarima = SARIMAX(
    np.log(train['Passengers']),
    order=(1,1,1),
    seasonal_order=(1,1,1,12),
    enforce_stationarity=False,
    enforce_invertibility=False
)
fit_sarima = model_sarima.fit(disp=False)

# 3. Dự báo trên test
forecast_log = fit_sarima.forecast(steps=len(test))
forecast = np.exp(forecast_log)  # chuyển ngược log

# 4. Đánh giá mô hình
def mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mae = mean_absolute_error(test['Passengers'], forecast)
rmse = np.sqrt(mean_squared_error(test['Passengers'], forecast))
mape_val = mape(test['Passengers'], forecast)

print(f"SARIMA - MAE: {mae:.2f}, RMSE: {rmse:.2f}, MAPE: {mape_val:.2f}%")